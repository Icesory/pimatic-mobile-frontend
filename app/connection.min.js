(function(){var a;a=pimatic.tryCatch,$(document).on("pagebeforecreate",function(){return null==pimatic.socket?(pimatic.socket=io("/",{reconnection:!0,reconnectionDelay:1e3,reconnectionDelayMax:3e3,timeout:2e4}),pimatic.socket.io.on("open",function(){var a;if(pimatic.loading("socket","hide"),null!=window.applicationCache)try{return window.applicationCache.update()}catch(b){return a=b,console.log(a)}}),pimatic.socket.on("devices",a(function(a){return pimatic.updateFromJs({devices:a})})),pimatic.socket.on("rules",a(function(a){return pimatic.updateFromJs({rules:a})})),pimatic.socket.on("variables",a(function(a){return pimatic.updateFromJs({variables:a})})),pimatic.socket.on("pages",a(function(a){return pimatic.updateFromJs({devicepages:a})})),pimatic.socket.on("groups",a(function(a){return pimatic.updateFromJs({groups:a})})),pimatic.socket.on("deviceAttributeChanged",function(a){return pimatic.updateDeviceAttribute(a.deviceId,a.attributeName,a.value)}),pimatic.socket.on("deviceOrderChanged",a(function(a){return pimatic.updateDeviceOrder(a)})),pimatic.socket.on("deviceChanged",a(function(a){return pimatic.updateDeviceFromJs(a)})),pimatic.socket.on("deviceRemoved",a(function(a){return pimatic.removeDevice(a.id)})),pimatic.socket.on("deviceAdded",a(function(a){return pimatic.updateDeviceFromJs(a)})),pimatic.socket.on("pageChanged",a(function(a){return pimatic.updatePageFromJs(a)})),pimatic.socket.on("pageRemoved",a(function(a){return pimatic.removePage(a.id)})),pimatic.socket.on("pageAdded",a(function(a){return pimatic.updatePageFromJs(a)})),pimatic.socket.on("groupChanged",a(function(a){return pimatic.updateGroupFromJs(a)})),pimatic.socket.on("groupRemoved",a(function(a){return pimatic.removeGroup(a.id)})),pimatic.socket.on("groupAdded",a(function(a){return pimatic.updateGroupFromJs(a)})),pimatic.socket.on("groupOrderChanged",a(function(a){return pimatic.updateGroupOrder(a)})),pimatic.socket.on("ruleAdded",a(function(a){return pimatic.updateRuleFromJs(a)})),pimatic.socket.on("ruleChanged",a(function(a){return pimatic.updateRuleFromJs(a)})),pimatic.socket.on("ruleRemoved",a(function(a){return pimatic.removeRule(a.id)})),pimatic.socket.on("ruleOrderChanged",a(function(a){return pimatic.updateRuleOrder(a)})),pimatic.socket.on("variableAdded",a(function(a){return pimatic.updateVariableFromJs(a)})),pimatic.socket.on("variableChanged",a(function(a){return pimatic.updateVariableFromJs(a)})),pimatic.socket.on("variableValueChanged",a(function(a){return pimatic.updateVariableValue(a.variableName,a.variableValue)})),pimatic.socket.on("variableRemoved",a(function(a){return pimatic.removeVariable(a.name)})),pimatic.socket.on("variableOrderChanged",a(function(a){return pimatic.updateVariableOrder(a)})),pimatic.socket.on("updateProcessStatus",a(function(a){return pimatic.updateProcessStatus(a.status)})),pimatic.socket.on("updateProcessMessage",a(function(a){return pimatic.updateProcessMessages.push(a.message)})),pimatic.socket.on("messageLogged",a(function(a){return"debug"!==a.level?pimatic["try"](function(){return function(){return pimatic.showToast(a.msg)}}(this)):void 0})),pimatic.loading("socket","show",{text:__("Connecting"),blocking:!1}),pimatic.socket.io.on("reconnect_attempt",function(){return pimatic.loading("socket","show",{text:__("connection lost, retrying"),blocking:!1})}),pimatic.socket.io.on("connect_error",function(a){return pimatic.loading("socket","show",{text:__("could not connect (%s), retrying",a.message),blocking:!1})}),pimatic.socket.io.on("connect_timeout",function(){return pimatic.loading("socket","show",{text:__("connect timed out"),blocking:!1})})):void 0})}).call(this);